# This is a garbage file generated by AI for troubleshooting.

import torch
import cv2
import numpy as np

def show_debug_image(gray_t: torch.Tensor, win_name: str = "debug"):
    """
    Display a grayscale 84×84 frame unflipped (left) and flipped (right).

    Parameters
    ----------
    gray_t : torch.Tensor
        Shape (1, 84, 84) or (84, 84).  dtype float32/uint8, on CPU.
    win_name : str
        OpenCV window name (re-used every call).
    """
    gray_t = gray_t[0]
    # ── normalize shape to (1, H, W) ────────────────────────────────
    if gray_t.ndim == 2:
        gray_t = gray_t.unsqueeze(0)           # (1, H, W)
    assert gray_t.shape[0] == 1, "expect single-channel tensor"

    # ── identical flip logic used by the agent ──────────────────────
    flipped = torch.flip(gray_t, dims=[2])     # width axis

    # ── stack side-by-side & convert for cv2 ────────────────────────
    left  = gray_t.squeeze(0).cpu().numpy()    # (H, W)
    right = flipped.squeeze(0).cpu().numpy()
    side  = np.concatenate((left, right), axis=1)          # (H, 2W)

    # cv2 expects 8-bit; repeat channels so it shows in colour window
    if side.dtype != np.uint8:
        side = np.clip(side, 0, 255).astype(np.uint8)
    side_bgr = cv2.cvtColor(np.repeat(side[..., None], 3, axis=2),
                            cv2.COLOR_RGB2BGR)

    side_bgr = cv2.resize(
        side_bgr,
        (side_bgr.shape[1] * 4, side_bgr.shape[0] * 4),
        interpolation=cv2.INTER_NEAREST      # keeps crisp pixels
    )
    cv2.imshow(win_name, side_bgr)
    cv2.waitKey(1)                              # non-blocking (1 ms)
